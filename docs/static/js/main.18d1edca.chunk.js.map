{"version":3,"sources":["assets/lars-maart-2022-small.jpeg","assets/laptop screen.png","assets/laptop_excursions.png","assets/houston screen.png","Transition/Transition.jsx","blocks/SimpleBlock.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SimpleBlock","title","description","image","className","zoomMargin","src","App","useState","isIn","setIn","me","alt","onClick","vrijwilligerTool","excusions","houston","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,oD,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,2LCO5B,OAAD,OAHG,IAGH,kB,gBCHC,SAASC,EAAT,GAAqD,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,MACtD,OACI,yBAAKC,UAAU,uCACX,yBAAKA,UAAU,aAAY,4BAAKH,IAChC,6BACA,yBAAKG,UAAU,YAAW,2BAAIF,IAC9B,yBAAKE,UAAU,YAAW,kBAAC,IAAD,CAAMC,WAAY,KAAK,yBAAKD,UAAU,gBAAgBE,IAAKH,O,wECoClFI,MAnCf,WAAgB,IAAD,EACSC,oBAAS,GADlB,mBACNC,EADM,KACAC,EADA,KAGb,OACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,KAAM,yBAAKE,IAAKK,IAAIP,UAAU,iBAAiBQ,IAAI,WAGrD,yBAAKR,UAAU,mBACb,wBAAIA,UAAU,aAAd,aACA,uBAAGA,UAAU,sCAAsCS,QAAS,kBAAMH,GAAOD,KACvE,6CAAwB,0BAAML,UAAU,WAAhB,8BAE1B,uBAAGA,UAAU,aAAb,qGAKN,yBAAKA,UAAU,uCACb,kBAACJ,EAAD,CAAaC,MAAO,sCAAuCC,YAAa,mPAAoPC,MAAM,4KAClU,kBAACH,EAAD,CAAaC,MAAO,2BAA4BC,YAAa,8TAA+TC,MAAOW,MACnY,kBAACd,EAAD,CAAaC,MAAO,qCAAsCC,YAAa,oZAAqZC,MAAOY,MACne,kBAACf,EAAD,CAAaC,MAAO,2BAA4BC,YAAa,8WAA+WC,MAAOa,UCzBzaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.18d1edca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lars-maart-2022-small.758c9865.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/laptop screen.215380d5.png\";","module.exports = __webpack_public_path__ + \"static/media/laptop_excursions.10da4145.png\";","module.exports = __webpack_public_path__ + \"static/media/houston screen.9b2517c9.png\";","import React from 'react'\r\n\r\nimport { Transition } from 'react-transition-group';\r\n\r\nconst duration = 100;\r\n\r\nconst defaultStyle = {\r\n    transition: `top ${duration}ms ease-in-out`,\r\n    position: 'relative',\r\n    top: '0px',\r\n    width: 400,\r\n    // zIndex: 1200\r\n}\r\n\r\nconst transitionStyles = {\r\n    entering: { left: 0, top: 0, position: 'relative' },\r\n    entered: { left: 0, top: 300, position: 'absolute' },\r\n    exiting: { left: 0, top: 300, position: 'absolute' },\r\n    exited: { left: 0, top: 0, position: 'relative' },\r\n};\r\n\r\nexport default function TransitionCustom({ in: inProp, children }) {\r\n    return <Transition in={inProp} timeout={duration}>\r\n        {state => (\r\n            <div style={{\r\n                ...defaultStyle,\r\n                ...transitionStyles[state]\r\n            }}>\r\n                {children}\r\n            </div>\r\n        )}\r\n    </Transition>\r\n}\r\n","import React from 'react'\r\nimport Zoom from 'react-medium-image-zoom'\r\nimport 'react-medium-image-zoom/dist/styles.css'\r\n\r\nexport default function SimpleBlock({ title, description, image }) {\r\n    return (\r\n        <div className='row p-5 m-4 personal-info col-xl-10'>\r\n            <div className='col-sm-12'><h2>{title}</h2></div>\r\n            <hr />\r\n            <div className='col-sm-6'><p>{description}</p></div>\r\n            <div className='col-sm-6'><Zoom zoomMargin={100}><img className='w-100 rounded' src={image}></img></Zoom></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Transition from './Transition/Transition';\nimport SimpleBlock from './blocks/SimpleBlock';\nimport Zoom from 'react-medium-image-zoom'\nimport 'react-medium-image-zoom/dist/styles.css'\nimport me from './assets/lars-maart-2022-small.jpeg'\nimport vrijwilligerTool from './assets/laptop screen.png'\nimport excusions from './assets/laptop_excursions.png'\nimport houston from './assets/houston screen.png'\n\nfunction App() {\n  const [isIn, setIn] = useState(false)\n\n  return (\n    <div className=\"App p-4\">\n      <div className='row h-100 row-container'>\n        <div className=\"col-md-4 col-xl-3 offset-xl-1\">\n          <div className='personal-info m-4 row sticky'>\n            <div className='col-4 col-md-12'>\n              <Zoom><img src={me} className=\"App-logo w-100\" alt=\"logo\" /></Zoom>\n\n            </div>\n            <div className='col-8 col-md-12'>\n              <h1 className='mb-0 mt-3'>Portfolio</h1>\n              <p className='mt-0 d-flex justify-content-between' onClick={() => setIn(!isIn)}>\n                <span>Lars Dekker</span><span className='ml-auto'> ðŸ‡³ðŸ‡±</span>\n              </p>\n              <p className='text-gray'>Hi! Welcome to my portfolio page. It includes some projects I am proud to have contributed to.</p>\n            </div>\n          </div>\n\n        </div>\n        <div className='portfolio-content col-md-8 col-xl-8'>\n          <SimpleBlock title={'Internship: Ticketdesigner in React'} description={'For my internship at Moonly Software I worked on a ticket designer and the implementation of React within a brand new ticketing system. With the introduction of React to Moonly, the new ticketing system got itself a stunning user interface.'} image=\"https://media-exp1.licdn.com/dms/image/C5622AQHbxkHJ_ChvnQ/feedshare-shrink_2048_1536/0/1604666702721?e=2147483647&v=beta&t=Nejz26w7kKKvdygYFSoHEHKt7D7tN7R8MdUpNP2KTV0\" />\n          <SimpleBlock title={'KV ONDO: Volunteers Tool'} description={'With this tool, KV ONDO is able to efficiently plan all their volunteers for every matchday at the association. The Korfball association of my hometown previously managed to do this by sending excel sheets around which costs a lot of time. A perfect case for my first project in college which is still in use today.'} image={vrijwilligerTool} />\n          <SimpleBlock title={'Moonly Software: Sunweb Excursions'} description={'After my internship I directly started working for Moonly Software besides my studies. One of the first projects I participated in was for Sunweb. A platform for organized excursions integrated with the previously mentioned ticketing system. In the team I was responsible for bootstrapping the ReactJs framework and integrating the ticketing system as well as the internationalization into the webapp.'} image={excusions} />\n          <SimpleBlock title={'Moonly Software: Houston'} description={'Moonly has a lot of clients that sometimes need the same functionality in the products we make for them. To reduce the duplicate work we created the Moonly Galaxy. The Moonly Galaxy consists of several stars with their own functionality which we can attach to our tenants. Using Kubernetes we are able to easily deploy and maintain the stars in our Moonly Galaxy.'} image={houston} />\n          {/* <SimpleBlock title={'Simple block'} description={''} image=\"/logo192.png\" />\n          <SimpleBlock title={'Simple block'} description={''} image=\"/logo192.png\" /> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}